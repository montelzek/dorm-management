type IssueRoomPayload {
    id: ID!
    roomNumber: String!
}

type IssueBuildingPayload {
    id: ID!
    name: String!
}

type IssuePayload {
    id: ID!
    title: String!
    description: String!
    status: String!
    priority: String!
    createdAt: String!
    updatedAt: String!
    room: IssueRoomPayload
    building: IssueBuildingPayload
}

type IssueUserPayload {
    id: ID!
    firstName: String!
    lastName: String!
}

type AdminIssuePayload {
    id: ID!
    title: String!
    description: String!
    status: String!
    priority: String!
    createdAt: String!
    updatedAt: String!
    user: IssueUserPayload!
    room: IssueRoomPayload
    building: IssueBuildingPayload
}

type AdminIssuesPagePayload {
    content: [AdminIssuePayload!]!
    totalElements: Int!
    totalPages: Int!
    currentPage: Int!
    pageSize: Int!
}

input CreateIssueInput {
    title: String!
    description: String!
    priority: String!
}

extend type Query {
    myIssues(status: String): [IssuePayload!]!
    allIssues(page: Int, size: Int, status: String, priority: String, buildingId: ID): AdminIssuesPagePayload!
}

extend type Mutation {
    createIssue(input: CreateIssueInput!): IssuePayload!
    cancelIssue(issueId: ID!): Boolean!
    updateIssueStatus(issueId: ID!, status: String!): AdminIssuePayload!
}

